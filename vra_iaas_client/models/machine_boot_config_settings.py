# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MachineBootConfigSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone_home_should_wait': 'bool',
        'phone_home_fail_on_timeout': 'bool',
        'phone_home_timeout_seconds': 'int'
    }

    attribute_map = {
        'phone_home_should_wait': 'phoneHomeShouldWait',
        'phone_home_fail_on_timeout': 'phoneHomeFailOnTimeout',
        'phone_home_timeout_seconds': 'phoneHomeTimeoutSeconds'
    }

    def __init__(self, phone_home_should_wait=None, phone_home_fail_on_timeout=None, phone_home_timeout_seconds=None):  # noqa: E501
        """MachineBootConfigSettings - a model defined in Swagger"""  # noqa: E501

        self._phone_home_should_wait = None
        self._phone_home_fail_on_timeout = None
        self._phone_home_timeout_seconds = None
        self.discriminator = None

        if phone_home_should_wait is not None:
            self.phone_home_should_wait = phone_home_should_wait
        if phone_home_fail_on_timeout is not None:
            self.phone_home_fail_on_timeout = phone_home_fail_on_timeout
        if phone_home_timeout_seconds is not None:
            self.phone_home_timeout_seconds = phone_home_timeout_seconds

    @property
    def phone_home_should_wait(self):
        """Gets the phone_home_should_wait of this MachineBootConfigSettings.  # noqa: E501

        A phone_home module will be added to the Cloud Config and the provisioning will wait on a callback prior proceeding  # noqa: E501

        :return: The phone_home_should_wait of this MachineBootConfigSettings.  # noqa: E501
        :rtype: bool
        """
        return self._phone_home_should_wait

    @phone_home_should_wait.setter
    def phone_home_should_wait(self, phone_home_should_wait):
        """Sets the phone_home_should_wait of this MachineBootConfigSettings.

        A phone_home module will be added to the Cloud Config and the provisioning will wait on a callback prior proceeding  # noqa: E501

        :param phone_home_should_wait: The phone_home_should_wait of this MachineBootConfigSettings.  # noqa: E501
        :type: bool
        """

        self._phone_home_should_wait = phone_home_should_wait

    @property
    def phone_home_fail_on_timeout(self):
        """Gets the phone_home_fail_on_timeout of this MachineBootConfigSettings.  # noqa: E501

        In case a timeout occurs whether the provisioning process should fail or continue.  # noqa: E501

        :return: The phone_home_fail_on_timeout of this MachineBootConfigSettings.  # noqa: E501
        :rtype: bool
        """
        return self._phone_home_fail_on_timeout

    @phone_home_fail_on_timeout.setter
    def phone_home_fail_on_timeout(self, phone_home_fail_on_timeout):
        """Sets the phone_home_fail_on_timeout of this MachineBootConfigSettings.

        In case a timeout occurs whether the provisioning process should fail or continue.  # noqa: E501

        :param phone_home_fail_on_timeout: The phone_home_fail_on_timeout of this MachineBootConfigSettings.  # noqa: E501
        :type: bool
        """

        self._phone_home_fail_on_timeout = phone_home_fail_on_timeout

    @property
    def phone_home_timeout_seconds(self):
        """Gets the phone_home_timeout_seconds of this MachineBootConfigSettings.  # noqa: E501

        The period of time to wait for the phone_home module callback to occur  # noqa: E501

        :return: The phone_home_timeout_seconds of this MachineBootConfigSettings.  # noqa: E501
        :rtype: int
        """
        return self._phone_home_timeout_seconds

    @phone_home_timeout_seconds.setter
    def phone_home_timeout_seconds(self, phone_home_timeout_seconds):
        """Sets the phone_home_timeout_seconds of this MachineBootConfigSettings.

        The period of time to wait for the phone_home module callback to occur  # noqa: E501

        :param phone_home_timeout_seconds: The phone_home_timeout_seconds of this MachineBootConfigSettings.  # noqa: E501
        :type: int
        """

        self._phone_home_timeout_seconds = phone_home_timeout_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachineBootConfigSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineBootConfigSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
