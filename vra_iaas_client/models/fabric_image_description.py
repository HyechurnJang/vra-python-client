# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FabricImageDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_config': 'str',
        'name': 'str',
        'id': 'str',
        'constraints': 'list[Constraint]'
    }

    attribute_map = {
        'cloud_config': 'cloudConfig',
        'name': 'name',
        'id': 'id',
        'constraints': 'constraints'
    }

    def __init__(self, cloud_config=None, name=None, id=None, constraints=None):  # noqa: E501
        """FabricImageDescription - a model defined in Swagger"""  # noqa: E501

        self._cloud_config = None
        self._name = None
        self._id = None
        self._constraints = None
        self.discriminator = None

        if cloud_config is not None:
            self.cloud_config = cloud_config
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if constraints is not None:
            self.constraints = constraints

    @property
    def cloud_config(self):
        """Gets the cloud_config of this FabricImageDescription.  # noqa: E501

        Cloud config for this image. This cloud config will be merged during provisioning with other cloud configurations such as the bootConfig provided in MachineSpecification.  # noqa: E501

        :return: The cloud_config of this FabricImageDescription.  # noqa: E501
        :rtype: str
        """
        return self._cloud_config

    @cloud_config.setter
    def cloud_config(self, cloud_config):
        """Sets the cloud_config of this FabricImageDescription.

        Cloud config for this image. This cloud config will be merged during provisioning with other cloud configurations such as the bootConfig provided in MachineSpecification.  # noqa: E501

        :param cloud_config: The cloud_config of this FabricImageDescription.  # noqa: E501
        :type: str
        """

        self._cloud_config = cloud_config

    @property
    def name(self):
        """Gets the name of this FabricImageDescription.  # noqa: E501

        Fabric image name. Valid if id not provided.  # noqa: E501

        :return: The name of this FabricImageDescription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FabricImageDescription.

        Fabric image name. Valid if id not provided.  # noqa: E501

        :param name: The name of this FabricImageDescription.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this FabricImageDescription.  # noqa: E501

        The id of the fabric image  # noqa: E501

        :return: The id of this FabricImageDescription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FabricImageDescription.

        The id of the fabric image  # noqa: E501

        :param id: The id of this FabricImageDescription.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def constraints(self):
        """Gets the constraints of this FabricImageDescription.  # noqa: E501

        Constraints that are used to drive placement policies for the image that is produced from this mapping.Constraint expressions are matched against tags on existing placement targets.  # noqa: E501

        :return: The constraints of this FabricImageDescription.  # noqa: E501
        :rtype: list[Constraint]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this FabricImageDescription.

        Constraints that are used to drive placement policies for the image that is produced from this mapping.Constraint expressions are matched against tags on existing placement targets.  # noqa: E501

        :param constraints: The constraints of this FabricImageDescription.  # noqa: E501
        :type: list[Constraint]
        """

        self._constraints = constraints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FabricImageDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FabricImageDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
