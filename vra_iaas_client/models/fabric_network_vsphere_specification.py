# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FabricNetworkVsphereSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ipv6_cidr': 'str',
        'is_default': 'bool',
        'domain': 'str',
        'default_ipv6_gateway': 'str',
        'dns_server_addresses': 'list[str]',
        'is_public': 'bool',
        'cidr': 'str',
        'default_gateway': 'str',
        'tags': 'list[Tag]',
        'dns_search_domains': 'list[str]'
    }

    attribute_map = {
        'ipv6_cidr': 'ipv6Cidr',
        'is_default': 'isDefault',
        'domain': 'domain',
        'default_ipv6_gateway': 'defaultIpv6Gateway',
        'dns_server_addresses': 'dnsServerAddresses',
        'is_public': 'isPublic',
        'cidr': 'cidr',
        'default_gateway': 'defaultGateway',
        'tags': 'tags',
        'dns_search_domains': 'dnsSearchDomains'
    }

    def __init__(self, ipv6_cidr=None, is_default=None, domain=None, default_ipv6_gateway=None, dns_server_addresses=None, is_public=None, cidr=None, default_gateway=None, tags=None, dns_search_domains=None):  # noqa: E501
        """FabricNetworkVsphereSpecification - a model defined in Swagger"""  # noqa: E501

        self._ipv6_cidr = None
        self._is_default = None
        self._domain = None
        self._default_ipv6_gateway = None
        self._dns_server_addresses = None
        self._is_public = None
        self._cidr = None
        self._default_gateway = None
        self._tags = None
        self._dns_search_domains = None
        self.discriminator = None

        if ipv6_cidr is not None:
            self.ipv6_cidr = ipv6_cidr
        if is_default is not None:
            self.is_default = is_default
        if domain is not None:
            self.domain = domain
        if default_ipv6_gateway is not None:
            self.default_ipv6_gateway = default_ipv6_gateway
        if dns_server_addresses is not None:
            self.dns_server_addresses = dns_server_addresses
        if is_public is not None:
            self.is_public = is_public
        if cidr is not None:
            self.cidr = cidr
        if default_gateway is not None:
            self.default_gateway = default_gateway
        if tags is not None:
            self.tags = tags
        if dns_search_domains is not None:
            self.dns_search_domains = dns_search_domains

    @property
    def ipv6_cidr(self):
        """Gets the ipv6_cidr of this FabricNetworkVsphereSpecification.  # noqa: E501

        Network IPv6 CIDR to be used.  # noqa: E501

        :return: The ipv6_cidr of this FabricNetworkVsphereSpecification.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_cidr

    @ipv6_cidr.setter
    def ipv6_cidr(self, ipv6_cidr):
        """Sets the ipv6_cidr of this FabricNetworkVsphereSpecification.

        Network IPv6 CIDR to be used.  # noqa: E501

        :param ipv6_cidr: The ipv6_cidr of this FabricNetworkVsphereSpecification.  # noqa: E501
        :type: str
        """

        self._ipv6_cidr = ipv6_cidr

    @property
    def is_default(self):
        """Gets the is_default of this FabricNetworkVsphereSpecification.  # noqa: E501

        Indicates whether this is the default subnet for the zone.  # noqa: E501

        :return: The is_default of this FabricNetworkVsphereSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this FabricNetworkVsphereSpecification.

        Indicates whether this is the default subnet for the zone.  # noqa: E501

        :param is_default: The is_default of this FabricNetworkVsphereSpecification.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def domain(self):
        """Gets the domain of this FabricNetworkVsphereSpecification.  # noqa: E501

        Domain value.  # noqa: E501

        :return: The domain of this FabricNetworkVsphereSpecification.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this FabricNetworkVsphereSpecification.

        Domain value.  # noqa: E501

        :param domain: The domain of this FabricNetworkVsphereSpecification.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def default_ipv6_gateway(self):
        """Gets the default_ipv6_gateway of this FabricNetworkVsphereSpecification.  # noqa: E501

        IPv6 default gateway to be used.  # noqa: E501

        :return: The default_ipv6_gateway of this FabricNetworkVsphereSpecification.  # noqa: E501
        :rtype: str
        """
        return self._default_ipv6_gateway

    @default_ipv6_gateway.setter
    def default_ipv6_gateway(self, default_ipv6_gateway):
        """Sets the default_ipv6_gateway of this FabricNetworkVsphereSpecification.

        IPv6 default gateway to be used.  # noqa: E501

        :param default_ipv6_gateway: The default_ipv6_gateway of this FabricNetworkVsphereSpecification.  # noqa: E501
        :type: str
        """

        self._default_ipv6_gateway = default_ipv6_gateway

    @property
    def dns_server_addresses(self):
        """Gets the dns_server_addresses of this FabricNetworkVsphereSpecification.  # noqa: E501

        A list of DNS server addresses that were set on this resource instance.  # noqa: E501

        :return: The dns_server_addresses of this FabricNetworkVsphereSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_server_addresses

    @dns_server_addresses.setter
    def dns_server_addresses(self, dns_server_addresses):
        """Sets the dns_server_addresses of this FabricNetworkVsphereSpecification.

        A list of DNS server addresses that were set on this resource instance.  # noqa: E501

        :param dns_server_addresses: The dns_server_addresses of this FabricNetworkVsphereSpecification.  # noqa: E501
        :type: list[str]
        """

        self._dns_server_addresses = dns_server_addresses

    @property
    def is_public(self):
        """Gets the is_public of this FabricNetworkVsphereSpecification.  # noqa: E501

        Indicates whether the sub-network supports public IP assignment.  # noqa: E501

        :return: The is_public of this FabricNetworkVsphereSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this FabricNetworkVsphereSpecification.

        Indicates whether the sub-network supports public IP assignment.  # noqa: E501

        :param is_public: The is_public of this FabricNetworkVsphereSpecification.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def cidr(self):
        """Gets the cidr of this FabricNetworkVsphereSpecification.  # noqa: E501

        Network CIDR to be used.  # noqa: E501

        :return: The cidr of this FabricNetworkVsphereSpecification.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this FabricNetworkVsphereSpecification.

        Network CIDR to be used.  # noqa: E501

        :param cidr: The cidr of this FabricNetworkVsphereSpecification.  # noqa: E501
        :type: str
        """

        self._cidr = cidr

    @property
    def default_gateway(self):
        """Gets the default_gateway of this FabricNetworkVsphereSpecification.  # noqa: E501

        IPv4 default gateway to be used.  # noqa: E501

        :return: The default_gateway of this FabricNetworkVsphereSpecification.  # noqa: E501
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this FabricNetworkVsphereSpecification.

        IPv4 default gateway to be used.  # noqa: E501

        :param default_gateway: The default_gateway of this FabricNetworkVsphereSpecification.  # noqa: E501
        :type: str
        """

        self._default_gateway = default_gateway

    @property
    def tags(self):
        """Gets the tags of this FabricNetworkVsphereSpecification.  # noqa: E501

        A set of tag keys and optional values that were set on this resource instance.  # noqa: E501

        :return: The tags of this FabricNetworkVsphereSpecification.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FabricNetworkVsphereSpecification.

        A set of tag keys and optional values that were set on this resource instance.  # noqa: E501

        :param tags: The tags of this FabricNetworkVsphereSpecification.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def dns_search_domains(self):
        """Gets the dns_search_domains of this FabricNetworkVsphereSpecification.  # noqa: E501

        A list of DNS search domains that were set on this resource instance.  # noqa: E501

        :return: The dns_search_domains of this FabricNetworkVsphereSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_search_domains

    @dns_search_domains.setter
    def dns_search_domains(self, dns_search_domains):
        """Sets the dns_search_domains of this FabricNetworkVsphereSpecification.

        A list of DNS search domains that were set on this resource instance.  # noqa: E501

        :param dns_search_domains: The dns_search_domains of this FabricNetworkVsphereSpecification.  # noqa: E501
        :type: list[str]
        """

        self._dns_search_domains = dns_search_domains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FabricNetworkVsphereSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FabricNetworkVsphereSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
