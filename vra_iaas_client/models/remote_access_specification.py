# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RemoteAccessSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password': 'str',
        'ssh_key': 'str',
        'key_pair': 'str',
        'authentication': 'str',
        'username': 'str'
    }

    attribute_map = {
        'password': 'password',
        'ssh_key': 'sshKey',
        'key_pair': 'keyPair',
        'authentication': 'authentication',
        'username': 'username'
    }

    def __init__(self, password=None, ssh_key=None, key_pair=None, authentication=None, username=None):  # noqa: E501
        """RemoteAccessSpecification - a model defined in Swagger"""  # noqa: E501

        self._password = None
        self._ssh_key = None
        self._key_pair = None
        self._authentication = None
        self._username = None
        self.discriminator = None

        if password is not None:
            self.password = password
        if ssh_key is not None:
            self.ssh_key = ssh_key
        if key_pair is not None:
            self.key_pair = key_pair
        self.authentication = authentication
        if username is not None:
            self.username = username

    @property
    def password(self):
        """Gets the password of this RemoteAccessSpecification.  # noqa: E501

        Remote access password for the Azure machine.  # noqa: E501

        :return: The password of this RemoteAccessSpecification.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RemoteAccessSpecification.

        Remote access password for the Azure machine.  # noqa: E501

        :param password: The password of this RemoteAccessSpecification.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def ssh_key(self):
        """Gets the ssh_key of this RemoteAccessSpecification.  # noqa: E501

        In key pair authentication, the public key on the provisioned machine. Users are expected to log in with their private key and a default username from the cloud provider. An AWS Ubuntu image comes with default user ubuntu, and Azure comes with default user azureuser. To log in by SSH: `ssh -i <private-key-path> ubuntu@52.90.80.153` `ssh -i <private-key-path> azureuser@40.76.14.255`  # noqa: E501

        :return: The ssh_key of this RemoteAccessSpecification.  # noqa: E501
        :rtype: str
        """
        return self._ssh_key

    @ssh_key.setter
    def ssh_key(self, ssh_key):
        """Sets the ssh_key of this RemoteAccessSpecification.

        In key pair authentication, the public key on the provisioned machine. Users are expected to log in with their private key and a default username from the cloud provider. An AWS Ubuntu image comes with default user ubuntu, and Azure comes with default user azureuser. To log in by SSH: `ssh -i <private-key-path> ubuntu@52.90.80.153` `ssh -i <private-key-path> azureuser@40.76.14.255`  # noqa: E501

        :param ssh_key: The ssh_key of this RemoteAccessSpecification.  # noqa: E501
        :type: str
        """

        self._ssh_key = ssh_key

    @property
    def key_pair(self):
        """Gets the key_pair of this RemoteAccessSpecification.  # noqa: E501

        Key Pair Name.  # noqa: E501

        :return: The key_pair of this RemoteAccessSpecification.  # noqa: E501
        :rtype: str
        """
        return self._key_pair

    @key_pair.setter
    def key_pair(self, key_pair):
        """Sets the key_pair of this RemoteAccessSpecification.

        Key Pair Name.  # noqa: E501

        :param key_pair: The key_pair of this RemoteAccessSpecification.  # noqa: E501
        :type: str
        """

        self._key_pair = key_pair

    @property
    def authentication(self):
        """Gets the authentication of this RemoteAccessSpecification.  # noqa: E501

        One of four authentication types. `generatedPublicPrivateKey`: The provisioned machine generates the public/private key pair and enables SSH to use them without user input. `publicPrivateKey`: The user enters the private key in the SSH command. See remoteAccess.sshKey. `usernamePassword`: The user enters a username and password for remote access. `keyPairName`: The user enters an already existing keyPair name. See remoteAccess.keyPair  # noqa: E501

        :return: The authentication of this RemoteAccessSpecification.  # noqa: E501
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this RemoteAccessSpecification.

        One of four authentication types. `generatedPublicPrivateKey`: The provisioned machine generates the public/private key pair and enables SSH to use them without user input. `publicPrivateKey`: The user enters the private key in the SSH command. See remoteAccess.sshKey. `usernamePassword`: The user enters a username and password for remote access. `keyPairName`: The user enters an already existing keyPair name. See remoteAccess.keyPair  # noqa: E501

        :param authentication: The authentication of this RemoteAccessSpecification.  # noqa: E501
        :type: str
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")  # noqa: E501

        self._authentication = authentication

    @property
    def username(self):
        """Gets the username of this RemoteAccessSpecification.  # noqa: E501

        Remote access username for the Azure machine.  # noqa: E501

        :return: The username of this RemoteAccessSpecification.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RemoteAccessSpecification.

        Remote access username for the Azure machine.  # noqa: E501

        :param username: The username of this RemoteAccessSpecification.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteAccessSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteAccessSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
