# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Rule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'access': 'str',
        'service': 'str',
        'ip_range_cidr': 'str',
        'name': 'str',
        'ports': 'str',
        'direction': 'str'
    }

    attribute_map = {
        'protocol': 'protocol',
        'access': 'access',
        'service': 'service',
        'ip_range_cidr': 'ipRangeCidr',
        'name': 'name',
        'ports': 'ports',
        'direction': 'direction'
    }

    def __init__(self, protocol=None, access=None, service=None, ip_range_cidr=None, name=None, ports=None, direction=None):  # noqa: E501
        """Rule - a model defined in Swagger"""  # noqa: E501

        self._protocol = None
        self._access = None
        self._service = None
        self._ip_range_cidr = None
        self._name = None
        self._ports = None
        self._direction = None
        self.discriminator = None

        if protocol is not None:
            self.protocol = protocol
        self.access = access
        if service is not None:
            self.service = service
        self.ip_range_cidr = ip_range_cidr
        if name is not None:
            self.name = name
        self.ports = ports
        self.direction = direction

    @property
    def protocol(self):
        """Gets the protocol of this Rule.  # noqa: E501

        Protocol the security rule applies to.  # noqa: E501

        :return: The protocol of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Rule.

        Protocol the security rule applies to.  # noqa: E501

        :param protocol: The protocol of this Rule.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def access(self):
        """Gets the access of this Rule.  # noqa: E501

        Type of access (allow or deny) for the security rule. Traffic that does not match any rules will be denied.  # noqa: E501

        :return: The access of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Rule.

        Type of access (allow or deny) for the security rule. Traffic that does not match any rules will be denied.  # noqa: E501

        :param access: The access of this Rule.  # noqa: E501
        :type: str
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")  # noqa: E501
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"  # noqa: E501
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def service(self):
        """Gets the service of this Rule.  # noqa: E501

        Service defined by the provider (such as: SSH, HTTPS). Either service or protocol have to be specified.  # noqa: E501

        :return: The service of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Rule.

        Service defined by the provider (such as: SSH, HTTPS). Either service or protocol have to be specified.  # noqa: E501

        :param service: The service of this Rule.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def ip_range_cidr(self):
        """Gets the ip_range_cidr of this Rule.  # noqa: E501

        IP address(es) in CIDR format which the security rule applies to.  # noqa: E501

        :return: The ip_range_cidr of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._ip_range_cidr

    @ip_range_cidr.setter
    def ip_range_cidr(self, ip_range_cidr):
        """Sets the ip_range_cidr of this Rule.

        IP address(es) in CIDR format which the security rule applies to.  # noqa: E501

        :param ip_range_cidr: The ip_range_cidr of this Rule.  # noqa: E501
        :type: str
        """
        if ip_range_cidr is None:
            raise ValueError("Invalid value for `ip_range_cidr`, must not be `None`")  # noqa: E501

        self._ip_range_cidr = ip_range_cidr

    @property
    def name(self):
        """Gets the name of this Rule.  # noqa: E501

        Name of security rule.  # noqa: E501

        :return: The name of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Rule.

        Name of security rule.  # noqa: E501

        :param name: The name of this Rule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ports(self):
        """Gets the ports of this Rule.  # noqa: E501

        Ports the security rule applies to.  # noqa: E501

        :return: The ports of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Rule.

        Ports the security rule applies to.  # noqa: E501

        :param ports: The ports of this Rule.  # noqa: E501
        :type: str
        """
        if ports is None:
            raise ValueError("Invalid value for `ports`, must not be `None`")  # noqa: E501

        self._ports = ports

    @property
    def direction(self):
        """Gets the direction of this Rule.  # noqa: E501

        Direction of the security rule (inbound or outboud).   # noqa: E501

        :return: The direction of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Rule.

        Direction of the security rule (inbound or outboud).   # noqa: E501

        :param direction: The direction of this Rule.  # noqa: E501
        :type: str
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501
        allowed_values = ["Inbound", "Outbound"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
