# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MachineSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image': 'str',
        'disks': 'list[DiskAttachmentSpecification]',
        'image_disk_constraints': 'list[Constraint]',
        'description': 'str',
        'machine_count': 'int',
        'constraints': 'list[Constraint]',
        'tags': 'list[Tag]',
        'flavor': 'str',
        'custom_properties': 'dict(str, str)',
        'deployment_id': 'str',
        'boot_config': 'MachineBootConfig',
        'boot_config_settings': 'MachineBootConfigSettings',
        'name': 'str',
        'nics': 'list[NetworkInterfaceSpecification]',
        'image_ref': 'str',
        'remote_access': 'RemoteAccessSpecification',
        'project_id': 'str'
    }

    attribute_map = {
        'image': 'image',
        'disks': 'disks',
        'image_disk_constraints': 'imageDiskConstraints',
        'description': 'description',
        'machine_count': 'machineCount',
        'constraints': 'constraints',
        'tags': 'tags',
        'flavor': 'flavor',
        'custom_properties': 'customProperties',
        'deployment_id': 'deploymentId',
        'boot_config': 'bootConfig',
        'boot_config_settings': 'bootConfigSettings',
        'name': 'name',
        'nics': 'nics',
        'image_ref': 'imageRef',
        'remote_access': 'remoteAccess',
        'project_id': 'projectId'
    }

    def __init__(self, image=None, disks=None, image_disk_constraints=None, description=None, machine_count=None, constraints=None, tags=None, flavor=None, custom_properties=None, deployment_id=None, boot_config=None, boot_config_settings=None, name=None, nics=None, image_ref=None, remote_access=None, project_id=None):  # noqa: E501
        """MachineSpecification - a model defined in Swagger"""  # noqa: E501

        self._image = None
        self._disks = None
        self._image_disk_constraints = None
        self._description = None
        self._machine_count = None
        self._constraints = None
        self._tags = None
        self._flavor = None
        self._custom_properties = None
        self._deployment_id = None
        self._boot_config = None
        self._boot_config_settings = None
        self._name = None
        self._nics = None
        self._image_ref = None
        self._remote_access = None
        self._project_id = None
        self.discriminator = None

        self.image = image
        if disks is not None:
            self.disks = disks
        if image_disk_constraints is not None:
            self.image_disk_constraints = image_disk_constraints
        if description is not None:
            self.description = description
        if machine_count is not None:
            self.machine_count = machine_count
        if constraints is not None:
            self.constraints = constraints
        if tags is not None:
            self.tags = tags
        self.flavor = flavor
        if custom_properties is not None:
            self.custom_properties = custom_properties
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if boot_config is not None:
            self.boot_config = boot_config
        if boot_config_settings is not None:
            self.boot_config_settings = boot_config_settings
        self.name = name
        if nics is not None:
            self.nics = nics
        self.image_ref = image_ref
        if remote_access is not None:
            self.remote_access = remote_access
        self.project_id = project_id

    @property
    def image(self):
        """Gets the image of this MachineSpecification.  # noqa: E501

        Type of image used for this machine.  # noqa: E501

        :return: The image of this MachineSpecification.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this MachineSpecification.

        Type of image used for this machine.  # noqa: E501

        :param image: The image of this MachineSpecification.  # noqa: E501
        :type: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def disks(self):
        """Gets the disks of this MachineSpecification.  # noqa: E501

        A set of disk specifications for this machine.  # noqa: E501

        :return: The disks of this MachineSpecification.  # noqa: E501
        :rtype: list[DiskAttachmentSpecification]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this MachineSpecification.

        A set of disk specifications for this machine.  # noqa: E501

        :param disks: The disks of this MachineSpecification.  # noqa: E501
        :type: list[DiskAttachmentSpecification]
        """

        self._disks = disks

    @property
    def image_disk_constraints(self):
        """Gets the image_disk_constraints of this MachineSpecification.  # noqa: E501

        Constraints that are used to drive placement policies for the image disk. Constraint expressions are matched against tags on existing placement targets.  # noqa: E501

        :return: The image_disk_constraints of this MachineSpecification.  # noqa: E501
        :rtype: list[Constraint]
        """
        return self._image_disk_constraints

    @image_disk_constraints.setter
    def image_disk_constraints(self, image_disk_constraints):
        """Sets the image_disk_constraints of this MachineSpecification.

        Constraints that are used to drive placement policies for the image disk. Constraint expressions are matched against tags on existing placement targets.  # noqa: E501

        :param image_disk_constraints: The image_disk_constraints of this MachineSpecification.  # noqa: E501
        :type: list[Constraint]
        """

        self._image_disk_constraints = image_disk_constraints

    @property
    def description(self):
        """Gets the description of this MachineSpecification.  # noqa: E501

        Describes machine within the scope of your organization and is not propagated to the cloud  # noqa: E501

        :return: The description of this MachineSpecification.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MachineSpecification.

        Describes machine within the scope of your organization and is not propagated to the cloud  # noqa: E501

        :param description: The description of this MachineSpecification.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def machine_count(self):
        """Gets the machine_count of this MachineSpecification.  # noqa: E501

        Number of machines to provision - default 1.  # noqa: E501

        :return: The machine_count of this MachineSpecification.  # noqa: E501
        :rtype: int
        """
        return self._machine_count

    @machine_count.setter
    def machine_count(self, machine_count):
        """Sets the machine_count of this MachineSpecification.

        Number of machines to provision - default 1.  # noqa: E501

        :param machine_count: The machine_count of this MachineSpecification.  # noqa: E501
        :type: int
        """

        self._machine_count = machine_count

    @property
    def constraints(self):
        """Gets the constraints of this MachineSpecification.  # noqa: E501

        Constraints that are used to drive placement policies for the virtual machine that is produced from this specification. Constraint expressions are matched against tags on existing placement targets.  # noqa: E501

        :return: The constraints of this MachineSpecification.  # noqa: E501
        :rtype: list[Constraint]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this MachineSpecification.

        Constraints that are used to drive placement policies for the virtual machine that is produced from this specification. Constraint expressions are matched against tags on existing placement targets.  # noqa: E501

        :param constraints: The constraints of this MachineSpecification.  # noqa: E501
        :type: list[Constraint]
        """

        self._constraints = constraints

    @property
    def tags(self):
        """Gets the tags of this MachineSpecification.  # noqa: E501

        A set of tag keys and optional values that should be set on any resource that is produced from this specification.  # noqa: E501

        :return: The tags of this MachineSpecification.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MachineSpecification.

        A set of tag keys and optional values that should be set on any resource that is produced from this specification.  # noqa: E501

        :param tags: The tags of this MachineSpecification.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def flavor(self):
        """Gets the flavor of this MachineSpecification.  # noqa: E501

        Flavor of machine instance.  # noqa: E501

        :return: The flavor of this MachineSpecification.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this MachineSpecification.

        Flavor of machine instance.  # noqa: E501

        :param flavor: The flavor of this MachineSpecification.  # noqa: E501
        :type: str
        """
        if flavor is None:
            raise ValueError("Invalid value for `flavor`, must not be `None`")  # noqa: E501

        self._flavor = flavor

    @property
    def custom_properties(self):
        """Gets the custom_properties of this MachineSpecification.  # noqa: E501

        Additional custom properties that may be used to extend the machine.  # noqa: E501

        :return: The custom_properties of this MachineSpecification.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this MachineSpecification.

        Additional custom properties that may be used to extend the machine.  # noqa: E501

        :param custom_properties: The custom_properties of this MachineSpecification.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_properties = custom_properties

    @property
    def deployment_id(self):
        """Gets the deployment_id of this MachineSpecification.  # noqa: E501

        The id of the deployment that is associated with this resource  # noqa: E501

        :return: The deployment_id of this MachineSpecification.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this MachineSpecification.

        The id of the deployment that is associated with this resource  # noqa: E501

        :param deployment_id: The deployment_id of this MachineSpecification.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def boot_config(self):
        """Gets the boot_config of this MachineSpecification.  # noqa: E501

        A valid cloud config data in json-escaped yaml syntax  # noqa: E501

        :return: The boot_config of this MachineSpecification.  # noqa: E501
        :rtype: MachineBootConfig
        """
        return self._boot_config

    @boot_config.setter
    def boot_config(self, boot_config):
        """Sets the boot_config of this MachineSpecification.

        A valid cloud config data in json-escaped yaml syntax  # noqa: E501

        :param boot_config: The boot_config of this MachineSpecification.  # noqa: E501
        :type: MachineBootConfig
        """

        self._boot_config = boot_config

    @property
    def boot_config_settings(self):
        """Gets the boot_config_settings of this MachineSpecification.  # noqa: E501

        A set of settings that specify how the provided Boot Config should be handled  # noqa: E501

        :return: The boot_config_settings of this MachineSpecification.  # noqa: E501
        :rtype: MachineBootConfigSettings
        """
        return self._boot_config_settings

    @boot_config_settings.setter
    def boot_config_settings(self, boot_config_settings):
        """Sets the boot_config_settings of this MachineSpecification.

        A set of settings that specify how the provided Boot Config should be handled  # noqa: E501

        :param boot_config_settings: The boot_config_settings of this MachineSpecification.  # noqa: E501
        :type: MachineBootConfigSettings
        """

        self._boot_config_settings = boot_config_settings

    @property
    def name(self):
        """Gets the name of this MachineSpecification.  # noqa: E501

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :return: The name of this MachineSpecification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MachineSpecification.

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :param name: The name of this MachineSpecification.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nics(self):
        """Gets the nics of this MachineSpecification.  # noqa: E501

        A set of network interface controller specifications for this machine. If not specified, then a default network connection will be created.  # noqa: E501

        :return: The nics of this MachineSpecification.  # noqa: E501
        :rtype: list[NetworkInterfaceSpecification]
        """
        return self._nics

    @nics.setter
    def nics(self, nics):
        """Sets the nics of this MachineSpecification.

        A set of network interface controller specifications for this machine. If not specified, then a default network connection will be created.  # noqa: E501

        :param nics: The nics of this MachineSpecification.  # noqa: E501
        :type: list[NetworkInterfaceSpecification]
        """

        self._nics = nics

    @property
    def image_ref(self):
        """Gets the image_ref of this MachineSpecification.  # noqa: E501

        Direct image reference used for this machine (name, path, location, uri, etc.). Valid if no image property is provided  # noqa: E501

        :return: The image_ref of this MachineSpecification.  # noqa: E501
        :rtype: str
        """
        return self._image_ref

    @image_ref.setter
    def image_ref(self, image_ref):
        """Sets the image_ref of this MachineSpecification.

        Direct image reference used for this machine (name, path, location, uri, etc.). Valid if no image property is provided  # noqa: E501

        :param image_ref: The image_ref of this MachineSpecification.  # noqa: E501
        :type: str
        """
        if image_ref is None:
            raise ValueError("Invalid value for `image_ref`, must not be `None`")  # noqa: E501

        self._image_ref = image_ref

    @property
    def remote_access(self):
        """Gets the remote_access of this MachineSpecification.  # noqa: E501

        Settings to remotely connect to the provisioned machine, by public/private key pair or username/password authentication. AWS and vSphere support key pair. Azure supports key pair or username/password.  # noqa: E501

        :return: The remote_access of this MachineSpecification.  # noqa: E501
        :rtype: RemoteAccessSpecification
        """
        return self._remote_access

    @remote_access.setter
    def remote_access(self, remote_access):
        """Sets the remote_access of this MachineSpecification.

        Settings to remotely connect to the provisioned machine, by public/private key pair or username/password authentication. AWS and vSphere support key pair. Azure supports key pair or username/password.  # noqa: E501

        :param remote_access: The remote_access of this MachineSpecification.  # noqa: E501
        :type: RemoteAccessSpecification
        """

        self._remote_access = remote_access

    @property
    def project_id(self):
        """Gets the project_id of this MachineSpecification.  # noqa: E501

        The id of the project the current user belongs to.  # noqa: E501

        :return: The project_id of this MachineSpecification.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this MachineSpecification.

        The id of the project the current user belongs to.  # noqa: E501

        :param project_id: The project_id of this MachineSpecification.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachineSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
