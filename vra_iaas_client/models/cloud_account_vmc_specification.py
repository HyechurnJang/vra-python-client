# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CloudAccountVmcSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_name': 'str',
        'accept_self_signed_certificate': 'bool',
        'api_key': 'str',
        'nsx_host_name': 'str',
        'sddc_id': 'str',
        'description': 'str',
        'region_ids': 'list[str]',
        'tags': 'list[Tag]',
        'password': 'str',
        'create_default_zones': 'bool',
        'dc_id': 'str',
        'name': 'str',
        'username': 'str'
    }

    attribute_map = {
        'host_name': 'hostName',
        'accept_self_signed_certificate': 'acceptSelfSignedCertificate',
        'api_key': 'apiKey',
        'nsx_host_name': 'nsxHostName',
        'sddc_id': 'sddcId',
        'description': 'description',
        'region_ids': 'regionIds',
        'tags': 'tags',
        'password': 'password',
        'create_default_zones': 'createDefaultZones',
        'dc_id': 'dcId',
        'name': 'name',
        'username': 'username'
    }

    def __init__(self, host_name=None, accept_self_signed_certificate=None, api_key=None, nsx_host_name=None, sddc_id=None, description=None, region_ids=None, tags=None, password=None, create_default_zones=None, dc_id=None, name=None, username=None):  # noqa: E501
        """CloudAccountVmcSpecification - a model defined in Swagger"""  # noqa: E501

        self._host_name = None
        self._accept_self_signed_certificate = None
        self._api_key = None
        self._nsx_host_name = None
        self._sddc_id = None
        self._description = None
        self._region_ids = None
        self._tags = None
        self._password = None
        self._create_default_zones = None
        self._dc_id = None
        self._name = None
        self._username = None
        self.discriminator = None

        self.host_name = host_name
        if accept_self_signed_certificate is not None:
            self.accept_self_signed_certificate = accept_self_signed_certificate
        if api_key is not None:
            self.api_key = api_key
        self.nsx_host_name = nsx_host_name
        if sddc_id is not None:
            self.sddc_id = sddc_id
        if description is not None:
            self.description = description
        self.region_ids = region_ids
        if tags is not None:
            self.tags = tags
        self.password = password
        if create_default_zones is not None:
            self.create_default_zones = create_default_zones
        if dc_id is not None:
            self.dc_id = dc_id
        self.name = name
        self.username = username

    @property
    def host_name(self):
        """Gets the host_name of this CloudAccountVmcSpecification.  # noqa: E501

        Enter the IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.  # noqa: E501

        :return: The host_name of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this CloudAccountVmcSpecification.

        Enter the IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.  # noqa: E501

        :param host_name: The host_name of this CloudAccountVmcSpecification.  # noqa: E501
        :type: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")  # noqa: E501

        self._host_name = host_name

    @property
    def accept_self_signed_certificate(self):
        """Gets the accept_self_signed_certificate of this CloudAccountVmcSpecification.  # noqa: E501

        Accept self signed certificate when connecting to vSphere  # noqa: E501

        :return: The accept_self_signed_certificate of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._accept_self_signed_certificate

    @accept_self_signed_certificate.setter
    def accept_self_signed_certificate(self, accept_self_signed_certificate):
        """Sets the accept_self_signed_certificate of this CloudAccountVmcSpecification.

        Accept self signed certificate when connecting to vSphere  # noqa: E501

        :param accept_self_signed_certificate: The accept_self_signed_certificate of this CloudAccountVmcSpecification.  # noqa: E501
        :type: bool
        """

        self._accept_self_signed_certificate = accept_self_signed_certificate

    @property
    def api_key(self):
        """Gets the api_key of this CloudAccountVmcSpecification.  # noqa: E501

        VMC API access key  # noqa: E501

        :return: The api_key of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this CloudAccountVmcSpecification.

        VMC API access key  # noqa: E501

        :param api_key: The api_key of this CloudAccountVmcSpecification.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def nsx_host_name(self):
        """Gets the nsx_host_name of this CloudAccountVmcSpecification.  # noqa: E501

        The IP address of the NSX Manager server in the specified SDDC / FQDN.  # noqa: E501

        :return: The nsx_host_name of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: str
        """
        return self._nsx_host_name

    @nsx_host_name.setter
    def nsx_host_name(self, nsx_host_name):
        """Sets the nsx_host_name of this CloudAccountVmcSpecification.

        The IP address of the NSX Manager server in the specified SDDC / FQDN.  # noqa: E501

        :param nsx_host_name: The nsx_host_name of this CloudAccountVmcSpecification.  # noqa: E501
        :type: str
        """
        if nsx_host_name is None:
            raise ValueError("Invalid value for `nsx_host_name`, must not be `None`")  # noqa: E501

        self._nsx_host_name = nsx_host_name

    @property
    def sddc_id(self):
        """Gets the sddc_id of this CloudAccountVmcSpecification.  # noqa: E501

        Identifier of the on-premise SDDC to be used by this cloud account. Note that NSX-V SDDCs are not supported.  # noqa: E501

        :return: The sddc_id of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: str
        """
        return self._sddc_id

    @sddc_id.setter
    def sddc_id(self, sddc_id):
        """Sets the sddc_id of this CloudAccountVmcSpecification.

        Identifier of the on-premise SDDC to be used by this cloud account. Note that NSX-V SDDCs are not supported.  # noqa: E501

        :param sddc_id: The sddc_id of this CloudAccountVmcSpecification.  # noqa: E501
        :type: str
        """

        self._sddc_id = sddc_id

    @property
    def description(self):
        """Gets the description of this CloudAccountVmcSpecification.  # noqa: E501

        A human-friendly description.  # noqa: E501

        :return: The description of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CloudAccountVmcSpecification.

        A human-friendly description.  # noqa: E501

        :param description: The description of this CloudAccountVmcSpecification.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def region_ids(self):
        """Gets the region_ids of this CloudAccountVmcSpecification.  # noqa: E501

        A set of Region names to enable provisioning on.Refer to /iaas/cloud-accounts/region-enumeration.  # noqa: E501

        :return: The region_ids of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._region_ids

    @region_ids.setter
    def region_ids(self, region_ids):
        """Sets the region_ids of this CloudAccountVmcSpecification.

        A set of Region names to enable provisioning on.Refer to /iaas/cloud-accounts/region-enumeration.  # noqa: E501

        :param region_ids: The region_ids of this CloudAccountVmcSpecification.  # noqa: E501
        :type: list[str]
        """
        if region_ids is None:
            raise ValueError("Invalid value for `region_ids`, must not be `None`")  # noqa: E501

        self._region_ids = region_ids

    @property
    def tags(self):
        """Gets the tags of this CloudAccountVmcSpecification.  # noqa: E501

        A set of tag keys and optional values to set on the Cloud Account.Cloud account capability tags may enable different features.   # noqa: E501

        :return: The tags of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CloudAccountVmcSpecification.

        A set of tag keys and optional values to set on the Cloud Account.Cloud account capability tags may enable different features.   # noqa: E501

        :param tags: The tags of this CloudAccountVmcSpecification.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def password(self):
        """Gets the password of this CloudAccountVmcSpecification.  # noqa: E501

        Password for the user used to authenticate with the cloud Account  # noqa: E501

        :return: The password of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CloudAccountVmcSpecification.

        Password for the user used to authenticate with the cloud Account  # noqa: E501

        :param password: The password of this CloudAccountVmcSpecification.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def create_default_zones(self):
        """Gets the create_default_zones of this CloudAccountVmcSpecification.  # noqa: E501

        Create default cloud zones for the enabled regions.  # noqa: E501

        :return: The create_default_zones of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._create_default_zones

    @create_default_zones.setter
    def create_default_zones(self, create_default_zones):
        """Sets the create_default_zones of this CloudAccountVmcSpecification.

        Create default cloud zones for the enabled regions.  # noqa: E501

        :param create_default_zones: The create_default_zones of this CloudAccountVmcSpecification.  # noqa: E501
        :type: bool
        """

        self._create_default_zones = create_default_zones

    @property
    def dc_id(self):
        """Gets the dc_id of this CloudAccountVmcSpecification.  # noqa: E501

        Identifier of a data collector vm deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collectors  # noqa: E501

        :return: The dc_id of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: str
        """
        return self._dc_id

    @dc_id.setter
    def dc_id(self, dc_id):
        """Sets the dc_id of this CloudAccountVmcSpecification.

        Identifier of a data collector vm deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collectors  # noqa: E501

        :param dc_id: The dc_id of this CloudAccountVmcSpecification.  # noqa: E501
        :type: str
        """

        self._dc_id = dc_id

    @property
    def name(self):
        """Gets the name of this CloudAccountVmcSpecification.  # noqa: E501

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :return: The name of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudAccountVmcSpecification.

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :param name: The name of this CloudAccountVmcSpecification.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def username(self):
        """Gets the username of this CloudAccountVmcSpecification.  # noqa: E501

        vCenter user name for the specified SDDC.The specified user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.  # noqa: E501

        :return: The username of this CloudAccountVmcSpecification.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CloudAccountVmcSpecification.

        vCenter user name for the specified SDDC.The specified user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.  # noqa: E501

        :param username: The username of this CloudAccountVmcSpecification.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudAccountVmcSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudAccountVmcSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
