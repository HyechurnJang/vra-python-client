# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NetworkIPRangeSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_version': 'str',
        'fabric_network_id': 'str',
        'name': 'str',
        'description': 'str',
        'start_ip_address': 'str',
        'end_ip_address': 'str',
        'tags': 'list[Tag]'
    }

    attribute_map = {
        'ip_version': 'ipVersion',
        'fabric_network_id': 'fabricNetworkId',
        'name': 'name',
        'description': 'description',
        'start_ip_address': 'startIPAddress',
        'end_ip_address': 'endIPAddress',
        'tags': 'tags'
    }

    def __init__(self, ip_version=None, fabric_network_id=None, name=None, description=None, start_ip_address=None, end_ip_address=None, tags=None):  # noqa: E501
        """NetworkIPRangeSpecification - a model defined in Swagger"""  # noqa: E501

        self._ip_version = None
        self._fabric_network_id = None
        self._name = None
        self._description = None
        self._start_ip_address = None
        self._end_ip_address = None
        self._tags = None
        self.discriminator = None

        if ip_version is not None:
            self.ip_version = ip_version
        if fabric_network_id is not None:
            self.fabric_network_id = fabric_network_id
        self.name = name
        if description is not None:
            self.description = description
        self.start_ip_address = start_ip_address
        self.end_ip_address = end_ip_address
        if tags is not None:
            self.tags = tags

    @property
    def ip_version(self):
        """Gets the ip_version of this NetworkIPRangeSpecification.  # noqa: E501

        IP address version: IPv4 or IPv6. Default: IPv4.  # noqa: E501

        :return: The ip_version of this NetworkIPRangeSpecification.  # noqa: E501
        :rtype: str
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this NetworkIPRangeSpecification.

        IP address version: IPv4 or IPv6. Default: IPv4.  # noqa: E501

        :param ip_version: The ip_version of this NetworkIPRangeSpecification.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPv4", "IPv6"]  # noqa: E501
        if ip_version not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_version` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_version, allowed_values)
            )

        self._ip_version = ip_version

    @property
    def fabric_network_id(self):
        """Gets the fabric_network_id of this NetworkIPRangeSpecification.  # noqa: E501

        The Id of the parent fabric network.  # noqa: E501

        :return: The fabric_network_id of this NetworkIPRangeSpecification.  # noqa: E501
        :rtype: str
        """
        return self._fabric_network_id

    @fabric_network_id.setter
    def fabric_network_id(self, fabric_network_id):
        """Sets the fabric_network_id of this NetworkIPRangeSpecification.

        The Id of the parent fabric network.  # noqa: E501

        :param fabric_network_id: The fabric_network_id of this NetworkIPRangeSpecification.  # noqa: E501
        :type: str
        """

        self._fabric_network_id = fabric_network_id

    @property
    def name(self):
        """Gets the name of this NetworkIPRangeSpecification.  # noqa: E501

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :return: The name of this NetworkIPRangeSpecification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkIPRangeSpecification.

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :param name: The name of this NetworkIPRangeSpecification.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this NetworkIPRangeSpecification.  # noqa: E501

        A human-friendly description.  # noqa: E501

        :return: The description of this NetworkIPRangeSpecification.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NetworkIPRangeSpecification.

        A human-friendly description.  # noqa: E501

        :param description: The description of this NetworkIPRangeSpecification.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start_ip_address(self):
        """Gets the start_ip_address of this NetworkIPRangeSpecification.  # noqa: E501

        Start IP address of the range.  # noqa: E501

        :return: The start_ip_address of this NetworkIPRangeSpecification.  # noqa: E501
        :rtype: str
        """
        return self._start_ip_address

    @start_ip_address.setter
    def start_ip_address(self, start_ip_address):
        """Sets the start_ip_address of this NetworkIPRangeSpecification.

        Start IP address of the range.  # noqa: E501

        :param start_ip_address: The start_ip_address of this NetworkIPRangeSpecification.  # noqa: E501
        :type: str
        """
        if start_ip_address is None:
            raise ValueError("Invalid value for `start_ip_address`, must not be `None`")  # noqa: E501

        self._start_ip_address = start_ip_address

    @property
    def end_ip_address(self):
        """Gets the end_ip_address of this NetworkIPRangeSpecification.  # noqa: E501

        End IP address of the range.  # noqa: E501

        :return: The end_ip_address of this NetworkIPRangeSpecification.  # noqa: E501
        :rtype: str
        """
        return self._end_ip_address

    @end_ip_address.setter
    def end_ip_address(self, end_ip_address):
        """Sets the end_ip_address of this NetworkIPRangeSpecification.

        End IP address of the range.  # noqa: E501

        :param end_ip_address: The end_ip_address of this NetworkIPRangeSpecification.  # noqa: E501
        :type: str
        """
        if end_ip_address is None:
            raise ValueError("Invalid value for `end_ip_address`, must not be `None`")  # noqa: E501

        self._end_ip_address = end_ip_address

    @property
    def tags(self):
        """Gets the tags of this NetworkIPRangeSpecification.  # noqa: E501

        A set of tag keys and optional values that were set on this resource instance.  # noqa: E501

        :return: The tags of this NetworkIPRangeSpecification.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NetworkIPRangeSpecification.

        A set of tag keys and optional values that were set on this resource instance.  # noqa: E501

        :param tags: The tags of this NetworkIPRangeSpecification.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkIPRangeSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkIPRangeSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
