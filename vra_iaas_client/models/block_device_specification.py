# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BlockDeviceSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity_in_gb': 'int',
        'source_reference': 'str',
        'custom_properties': 'dict(str, str)',
        'encrypted': 'bool',
        'deployment_id': 'str',
        'name': 'str',
        'description': 'str',
        'disk_content_base64': 'str',
        'persistent': 'bool',
        'project_id': 'str',
        'constraints': 'list[Constraint]',
        'tags': 'list[Tag]'
    }

    attribute_map = {
        'capacity_in_gb': 'capacityInGB',
        'source_reference': 'sourceReference',
        'custom_properties': 'customProperties',
        'encrypted': 'encrypted',
        'deployment_id': 'deploymentId',
        'name': 'name',
        'description': 'description',
        'disk_content_base64': 'diskContentBase64',
        'persistent': 'persistent',
        'project_id': 'projectId',
        'constraints': 'constraints',
        'tags': 'tags'
    }

    def __init__(self, capacity_in_gb=None, source_reference=None, custom_properties=None, encrypted=None, deployment_id=None, name=None, description=None, disk_content_base64=None, persistent=None, project_id=None, constraints=None, tags=None):  # noqa: E501
        """BlockDeviceSpecification - a model defined in Swagger"""  # noqa: E501

        self._capacity_in_gb = None
        self._source_reference = None
        self._custom_properties = None
        self._encrypted = None
        self._deployment_id = None
        self._name = None
        self._description = None
        self._disk_content_base64 = None
        self._persistent = None
        self._project_id = None
        self._constraints = None
        self._tags = None
        self.discriminator = None

        self.capacity_in_gb = capacity_in_gb
        if source_reference is not None:
            self.source_reference = source_reference
        if custom_properties is not None:
            self.custom_properties = custom_properties
        if encrypted is not None:
            self.encrypted = encrypted
        if deployment_id is not None:
            self.deployment_id = deployment_id
        self.name = name
        if description is not None:
            self.description = description
        if disk_content_base64 is not None:
            self.disk_content_base64 = disk_content_base64
        if persistent is not None:
            self.persistent = persistent
        self.project_id = project_id
        if constraints is not None:
            self.constraints = constraints
        if tags is not None:
            self.tags = tags

    @property
    def capacity_in_gb(self):
        """Gets the capacity_in_gb of this BlockDeviceSpecification.  # noqa: E501

        Capacity of the block device in GB.  # noqa: E501

        :return: The capacity_in_gb of this BlockDeviceSpecification.  # noqa: E501
        :rtype: int
        """
        return self._capacity_in_gb

    @capacity_in_gb.setter
    def capacity_in_gb(self, capacity_in_gb):
        """Sets the capacity_in_gb of this BlockDeviceSpecification.

        Capacity of the block device in GB.  # noqa: E501

        :param capacity_in_gb: The capacity_in_gb of this BlockDeviceSpecification.  # noqa: E501
        :type: int
        """
        if capacity_in_gb is None:
            raise ValueError("Invalid value for `capacity_in_gb`, must not be `None`")  # noqa: E501

        self._capacity_in_gb = capacity_in_gb

    @property
    def source_reference(self):
        """Gets the source_reference of this BlockDeviceSpecification.  # noqa: E501

        Reference to URI using which the block device has to be created.  # noqa: E501

        :return: The source_reference of this BlockDeviceSpecification.  # noqa: E501
        :rtype: str
        """
        return self._source_reference

    @source_reference.setter
    def source_reference(self, source_reference):
        """Sets the source_reference of this BlockDeviceSpecification.

        Reference to URI using which the block device has to be created.  # noqa: E501

        :param source_reference: The source_reference of this BlockDeviceSpecification.  # noqa: E501
        :type: str
        """

        self._source_reference = source_reference

    @property
    def custom_properties(self):
        """Gets the custom_properties of this BlockDeviceSpecification.  # noqa: E501

        Additional custom properties that may be used to extend the block device.  # noqa: E501

        :return: The custom_properties of this BlockDeviceSpecification.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this BlockDeviceSpecification.

        Additional custom properties that may be used to extend the block device.  # noqa: E501

        :param custom_properties: The custom_properties of this BlockDeviceSpecification.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_properties = custom_properties

    @property
    def encrypted(self):
        """Gets the encrypted of this BlockDeviceSpecification.  # noqa: E501

        Indicates whether the block device should be encrypted or not.  # noqa: E501

        :return: The encrypted of this BlockDeviceSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this BlockDeviceSpecification.

        Indicates whether the block device should be encrypted or not.  # noqa: E501

        :param encrypted: The encrypted of this BlockDeviceSpecification.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def deployment_id(self):
        """Gets the deployment_id of this BlockDeviceSpecification.  # noqa: E501

        The id of the deployment that is associated with this resource  # noqa: E501

        :return: The deployment_id of this BlockDeviceSpecification.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this BlockDeviceSpecification.

        The id of the deployment that is associated with this resource  # noqa: E501

        :param deployment_id: The deployment_id of this BlockDeviceSpecification.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def name(self):
        """Gets the name of this BlockDeviceSpecification.  # noqa: E501

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :return: The name of this BlockDeviceSpecification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BlockDeviceSpecification.

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :param name: The name of this BlockDeviceSpecification.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this BlockDeviceSpecification.  # noqa: E501

        A human-friendly description.  # noqa: E501

        :return: The description of this BlockDeviceSpecification.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BlockDeviceSpecification.

        A human-friendly description.  # noqa: E501

        :param description: The description of this BlockDeviceSpecification.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disk_content_base64(self):
        """Gets the disk_content_base64 of this BlockDeviceSpecification.  # noqa: E501

        Content of a disk, base64 encoded.  # noqa: E501

        :return: The disk_content_base64 of this BlockDeviceSpecification.  # noqa: E501
        :rtype: str
        """
        return self._disk_content_base64

    @disk_content_base64.setter
    def disk_content_base64(self, disk_content_base64):
        """Sets the disk_content_base64 of this BlockDeviceSpecification.

        Content of a disk, base64 encoded.  # noqa: E501

        :param disk_content_base64: The disk_content_base64 of this BlockDeviceSpecification.  # noqa: E501
        :type: str
        """

        self._disk_content_base64 = disk_content_base64

    @property
    def persistent(self):
        """Gets the persistent of this BlockDeviceSpecification.  # noqa: E501

        Indicates whether the block device survives a delete action.  # noqa: E501

        :return: The persistent of this BlockDeviceSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._persistent

    @persistent.setter
    def persistent(self, persistent):
        """Sets the persistent of this BlockDeviceSpecification.

        Indicates whether the block device survives a delete action.  # noqa: E501

        :param persistent: The persistent of this BlockDeviceSpecification.  # noqa: E501
        :type: bool
        """

        self._persistent = persistent

    @property
    def project_id(self):
        """Gets the project_id of this BlockDeviceSpecification.  # noqa: E501

        The id of the project the current user belongs to.  # noqa: E501

        :return: The project_id of this BlockDeviceSpecification.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this BlockDeviceSpecification.

        The id of the project the current user belongs to.  # noqa: E501

        :param project_id: The project_id of this BlockDeviceSpecification.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def constraints(self):
        """Gets the constraints of this BlockDeviceSpecification.  # noqa: E501

        Constraints that are used to drive placement policies for the block device that is produced from this specification. Constraint expressions are matched against tags on existing placement targets.  # noqa: E501

        :return: The constraints of this BlockDeviceSpecification.  # noqa: E501
        :rtype: list[Constraint]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this BlockDeviceSpecification.

        Constraints that are used to drive placement policies for the block device that is produced from this specification. Constraint expressions are matched against tags on existing placement targets.  # noqa: E501

        :param constraints: The constraints of this BlockDeviceSpecification.  # noqa: E501
        :type: list[Constraint]
        """

        self._constraints = constraints

    @property
    def tags(self):
        """Gets the tags of this BlockDeviceSpecification.  # noqa: E501

        A set of tag keys and optional values that should be set on any resource that is produced from this specification.  # noqa: E501

        :return: The tags of this BlockDeviceSpecification.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BlockDeviceSpecification.

        A set of tag keys and optional values that should be set on any resource that is produced from this specification.  # noqa: E501

        :param tags: The tags of this BlockDeviceSpecification.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlockDeviceSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockDeviceSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
