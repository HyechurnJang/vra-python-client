# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FabricFlavor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_disk_size_in_mb': 'int',
        'memory_in_mb': 'int',
        'name': 'str',
        'storage_type': 'str',
        'id': 'str',
        'data_disk_size_in_mb': 'int',
        'data_disk_max_count': 'int',
        'network_type': 'str',
        'cpu_count': 'int'
    }

    attribute_map = {
        'boot_disk_size_in_mb': 'bootDiskSizeInMB',
        'memory_in_mb': 'memoryInMB',
        'name': 'name',
        'storage_type': 'storageType',
        'id': 'id',
        'data_disk_size_in_mb': 'dataDiskSizeInMB',
        'data_disk_max_count': 'dataDiskMaxCount',
        'network_type': 'networkType',
        'cpu_count': 'cpuCount'
    }

    def __init__(self, boot_disk_size_in_mb=None, memory_in_mb=None, name=None, storage_type=None, id=None, data_disk_size_in_mb=None, data_disk_max_count=None, network_type=None, cpu_count=None):  # noqa: E501
        """FabricFlavor - a model defined in Swagger"""  # noqa: E501

        self._boot_disk_size_in_mb = None
        self._memory_in_mb = None
        self._name = None
        self._storage_type = None
        self._id = None
        self._data_disk_size_in_mb = None
        self._data_disk_max_count = None
        self._network_type = None
        self._cpu_count = None
        self.discriminator = None

        if boot_disk_size_in_mb is not None:
            self.boot_disk_size_in_mb = boot_disk_size_in_mb
        if memory_in_mb is not None:
            self.memory_in_mb = memory_in_mb
        self.name = name
        if storage_type is not None:
            self.storage_type = storage_type
        if id is not None:
            self.id = id
        if data_disk_size_in_mb is not None:
            self.data_disk_size_in_mb = data_disk_size_in_mb
        if data_disk_max_count is not None:
            self.data_disk_max_count = data_disk_max_count
        if network_type is not None:
            self.network_type = network_type
        if cpu_count is not None:
            self.cpu_count = cpu_count

    @property
    def boot_disk_size_in_mb(self):
        """Gets the boot_disk_size_in_mb of this FabricFlavor.  # noqa: E501

        Size of the boot disk (in megabytes). Not populated when inapplicable.  # noqa: E501

        :return: The boot_disk_size_in_mb of this FabricFlavor.  # noqa: E501
        :rtype: int
        """
        return self._boot_disk_size_in_mb

    @boot_disk_size_in_mb.setter
    def boot_disk_size_in_mb(self, boot_disk_size_in_mb):
        """Sets the boot_disk_size_in_mb of this FabricFlavor.

        Size of the boot disk (in megabytes). Not populated when inapplicable.  # noqa: E501

        :param boot_disk_size_in_mb: The boot_disk_size_in_mb of this FabricFlavor.  # noqa: E501
        :type: int
        """

        self._boot_disk_size_in_mb = boot_disk_size_in_mb

    @property
    def memory_in_mb(self):
        """Gets the memory_in_mb of this FabricFlavor.  # noqa: E501

        Total amount of memory (in megabytes). Not populated when inapplicable.  # noqa: E501

        :return: The memory_in_mb of this FabricFlavor.  # noqa: E501
        :rtype: int
        """
        return self._memory_in_mb

    @memory_in_mb.setter
    def memory_in_mb(self, memory_in_mb):
        """Sets the memory_in_mb of this FabricFlavor.

        Total amount of memory (in megabytes). Not populated when inapplicable.  # noqa: E501

        :param memory_in_mb: The memory_in_mb of this FabricFlavor.  # noqa: E501
        :type: int
        """

        self._memory_in_mb = memory_in_mb

    @property
    def name(self):
        """Gets the name of this FabricFlavor.  # noqa: E501

        The value of the instance type in the corresponding cloud.  # noqa: E501

        :return: The name of this FabricFlavor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FabricFlavor.

        The value of the instance type in the corresponding cloud.  # noqa: E501

        :param name: The name of this FabricFlavor.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def storage_type(self):
        """Gets the storage_type of this FabricFlavor.  # noqa: E501

        The type of storage supported by this instance type. Not populated when inapplicable.  # noqa: E501

        :return: The storage_type of this FabricFlavor.  # noqa: E501
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this FabricFlavor.

        The type of storage supported by this instance type. Not populated when inapplicable.  # noqa: E501

        :param storage_type: The storage_type of this FabricFlavor.  # noqa: E501
        :type: str
        """

        self._storage_type = storage_type

    @property
    def id(self):
        """Gets the id of this FabricFlavor.  # noqa: E501

        The internal identification used by the corresponding cloud end-point  # noqa: E501

        :return: The id of this FabricFlavor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FabricFlavor.

        The internal identification used by the corresponding cloud end-point  # noqa: E501

        :param id: The id of this FabricFlavor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def data_disk_size_in_mb(self):
        """Gets the data_disk_size_in_mb of this FabricFlavor.  # noqa: E501

        Size of the data disks (in megabytes). Not populated when inapplicable.  # noqa: E501

        :return: The data_disk_size_in_mb of this FabricFlavor.  # noqa: E501
        :rtype: int
        """
        return self._data_disk_size_in_mb

    @data_disk_size_in_mb.setter
    def data_disk_size_in_mb(self, data_disk_size_in_mb):
        """Sets the data_disk_size_in_mb of this FabricFlavor.

        Size of the data disks (in megabytes). Not populated when inapplicable.  # noqa: E501

        :param data_disk_size_in_mb: The data_disk_size_in_mb of this FabricFlavor.  # noqa: E501
        :type: int
        """

        self._data_disk_size_in_mb = data_disk_size_in_mb

    @property
    def data_disk_max_count(self):
        """Gets the data_disk_max_count of this FabricFlavor.  # noqa: E501

        Number of data disks. Not populated when inapplicable.  # noqa: E501

        :return: The data_disk_max_count of this FabricFlavor.  # noqa: E501
        :rtype: int
        """
        return self._data_disk_max_count

    @data_disk_max_count.setter
    def data_disk_max_count(self, data_disk_max_count):
        """Sets the data_disk_max_count of this FabricFlavor.

        Number of data disks. Not populated when inapplicable.  # noqa: E501

        :param data_disk_max_count: The data_disk_max_count of this FabricFlavor.  # noqa: E501
        :type: int
        """

        self._data_disk_max_count = data_disk_max_count

    @property
    def network_type(self):
        """Gets the network_type of this FabricFlavor.  # noqa: E501

        The type of network supported by this instance type. Not populated when inapplicable.  # noqa: E501

        :return: The network_type of this FabricFlavor.  # noqa: E501
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this FabricFlavor.

        The type of network supported by this instance type. Not populated when inapplicable.  # noqa: E501

        :param network_type: The network_type of this FabricFlavor.  # noqa: E501
        :type: str
        """

        self._network_type = network_type

    @property
    def cpu_count(self):
        """Gets the cpu_count of this FabricFlavor.  # noqa: E501

        Number of CPU cores. Not populated when inapplicable.  # noqa: E501

        :return: The cpu_count of this FabricFlavor.  # noqa: E501
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count):
        """Sets the cpu_count of this FabricFlavor.

        Number of CPU cores. Not populated when inapplicable.  # noqa: E501

        :param cpu_count: The cpu_count of this FabricFlavor.  # noqa: E501
        :type: int
        """

        self._cpu_count = cpu_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FabricFlavor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FabricFlavor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
